# Generated by Django 4.2.9 on 2025-07-30 23:50

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('company_name', models.CharField(blank=True, max_length=100, null=True)),
                ('company_rut', models.CharField(blank=True, max_length=12, null=True)),
                ('company_address', models.CharField(blank=True, max_length=255, null=True)),
                ('admin_name', models.CharField(blank=True, max_length=100, null=True)),
                ('profile_photo', models.ImageField(blank=True, help_text='Foto de perfil del usuario', null=True, upload_to='profile_photos/')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClasificacionTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Nombre de la clasificación', max_length=100, unique=True)),
                ('descripcion', models.TextField(blank=True, help_text='Descripción de la clasificación', null=True)),
                ('activa', models.BooleanField(default=True, help_text='Si la clasificación está activa')),
            ],
            options={
                'verbose_name': 'Clasificación de Ticket',
                'verbose_name_plural': 'Clasificaciones de Tickets',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Curso',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('descripcion', models.TextField(blank=True, null=True)),
                ('fecha_inicio', models.DateField(blank=True, null=True)),
                ('fecha_fin', models.DateField(blank=True, null=True)),
                ('activo', models.BooleanField(default=True)),
                ('precio', models.DecimalField(blank=True, decimal_places=0, help_text='Precio del curso', max_digits=10, null=True)),
                ('dias_plazo_pago', models.IntegerField(help_text='Días de plazo para realizar el pago')),
                ('docente_nombre', models.CharField(blank=True, max_length=100, null=True)),
                ('docente_titulos', models.TextField(blank=True, help_text='Títulos y certificaciones del docente', null=True)),
                ('docente_trayectoria', models.TextField(blank=True, help_text='Experiencia y trayectoria profesional del docente', null=True)),
                ('docente_foto', models.ImageField(blank=True, null=True, upload_to='docentes/')),
                ('requisitos', models.TextField(blank=True, help_text='Requisitos previos para el curso', null=True)),
                ('material_introductorio', models.TextField(blank=True, help_text='Material introductorio del curso', null=True)),
                ('material_curso', models.TextField(blank=True, help_text='Material principal del curso', null=True)),
                ('duracion', models.CharField(blank=True, help_text='Duración del curso (ej: 8 semanas)', max_length=50, null=True)),
                ('modalidad', models.CharField(blank=True, help_text='Modalidad del curso (ej: Online, Presencial, Híbrido)', max_length=50, null=True)),
                ('nivel', models.CharField(blank=True, help_text='Nivel del curso (ej: Básico, Intermedio, Avanzado)', max_length=50, null=True)),
                ('archivo_introductorio', models.FileField(blank=True, null=True, upload_to='cursos/material_introductorio/')),
                ('archivo_curso', models.FileField(blank=True, null=True, upload_to='cursos/material_curso/')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('category', models.CharField(max_length=50)),
                ('html_block', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='service_images/')),
            ],
        ),
        migrations.CreateModel(
            name='TicketSoporte',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(help_text='Título del ticket', max_length=200)),
                ('descripcion', models.TextField(help_text='Descripción detallada del problema')),
                ('clasificacion', models.CharField(help_text='Clasificación principal del ticket', max_length=100)),
                ('subclasificacion', models.CharField(help_text='Subclasificación del ticket', max_length=100)),
                ('estado', models.CharField(choices=[('abierto', 'Abierto'), ('en_proceso', 'En Proceso'), ('resuelto', 'Resuelto'), ('cerrado', 'Cerrado')], default='abierto', max_length=20)),
                ('prioridad', models.CharField(choices=[('baja', 'Baja'), ('media', 'Media'), ('alta', 'Alta'), ('urgente', 'Urgente')], default='media', max_length=20)),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True)),
                ('fecha_resolucion', models.DateTimeField(blank=True, null=True)),
                ('asignado_a', models.ForeignKey(blank=True, help_text='Usuario admin/staff asignado al ticket', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tickets_asignados', to=settings.AUTH_USER_MODEL)),
                ('curso', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets_soporte', to='home.curso')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets_soporte', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Ticket de Soporte',
                'verbose_name_plural': 'Tickets de Soporte',
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='ServiceProvision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('custom_url', models.URLField(blank=True, null=True)),
                ('configurations', models.JSONField(default=dict)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='provisions', to='home.service')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_provisions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RegistrationLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_used', models.BooleanField(default=False)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registration_links', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('category', models.CharField(choices=[('general', 'General'), ('tecnologia', 'Tecnología'), ('negocios', 'Negocios'), ('economia', 'Economía')], default='general', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('views', models.PositiveIntegerField(default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('curso', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='home.curso')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('message', models.TextField()),
                ('provision', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='home.serviceprovision')),
            ],
        ),
        migrations.CreateModel(
            name='InscripcionCurso',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_interesado', models.CharField(max_length=100)),
                ('nombre_empresa', models.CharField(max_length=100)),
                ('telefono_contacto', models.CharField(blank=True, max_length=15, null=True)),
                ('correo_contacto', models.EmailField(max_length=254)),
                ('fecha_solicitud', models.DateTimeField(auto_now_add=True)),
                ('fecha_pago', models.DateTimeField(blank=True, null=True)),
                ('estado', models.CharField(choices=[('pendiente', 'Pendiente de Pago'), ('pagado', 'Pagado'), ('cancelado', 'Cancelado')], default='pendiente', max_length=20)),
                ('observaciones', models.TextField(blank=True, null=True)),
                ('curso', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inscripciones', to='home.curso')),
                ('usuario_creado', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inscripciones_creadas', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Inscripción a Curso',
                'verbose_name_plural': 'Inscripciones a Cursos',
                'ordering': ['-fecha_solicitud'],
            },
        ),
        migrations.CreateModel(
            name='Evaluacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('tarea', 'Tarea'), ('examen', 'Examen'), ('proyecto', 'Proyecto'), ('participacion', 'Participación'), ('trabajo_practico', 'Trabajo Práctico'), ('presentacion', 'Presentación'), ('otro', 'Otro')], help_text='Tipo de evaluación', max_length=20)),
                ('nombre', models.CharField(help_text='Nombre de la evaluación', max_length=200)),
                ('fecha_inicio', models.DateField(blank=True, help_text='Fecha de inicio de la evaluación', null=True)),
                ('fecha_fin', models.DateField(blank=True, help_text='Fecha de fin de la evaluación', null=True)),
                ('nota_maxima', models.DecimalField(decimal_places=2, help_text='Nota máxima posible', max_digits=5)),
                ('ponderacion', models.DecimalField(decimal_places=2, help_text='Ponderación en porcentaje', max_digits=5)),
                ('descripcion', models.TextField(blank=True, help_text='Descripción de la evaluación', null=True)),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('fecha_modificacion', models.DateTimeField(auto_now=True)),
                ('activa', models.BooleanField(default=True, help_text='Indica si la evaluación está activa')),
                ('creado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='evaluaciones_creadas', to=settings.AUTH_USER_MODEL)),
                ('curso', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluaciones', to='home.curso')),
            ],
            options={
                'verbose_name': 'Evaluación',
                'verbose_name_plural': 'Evaluaciones',
                'ordering': ['-fecha_inicio', '-fecha_creacion'],
                'unique_together': {('curso', 'nombre')},
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='home.post')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ComentarioTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contenido', models.TextField(help_text='Contenido del comentario')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True)),
                ('es_interno', models.BooleanField(default=False, help_text='Si es True, solo lo ven usuarios admin/staff')),
                ('autor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comentarios_tickets', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comentarios', to='home.ticketsoporte')),
            ],
            options={
                'verbose_name': 'Comentario de Ticket',
                'verbose_name_plural': 'Comentarios de Tickets',
                'ordering': ['fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='Calificacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nota', models.DecimalField(blank=True, decimal_places=2, help_text='Nota obtenida', max_digits=5, null=True)),
                ('retroalimentacion', models.TextField(blank=True, help_text='Retroalimentación para el estudiante', null=True)),
                ('fecha_calificacion', models.DateTimeField(auto_now_add=True)),
                ('fecha_modificacion', models.DateTimeField(auto_now=True)),
                ('calificado_por', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calificaciones_asignadas', to=settings.AUTH_USER_MODEL)),
                ('estudiante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calificaciones', to=settings.AUTH_USER_MODEL)),
                ('evaluacion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calificaciones', to='home.evaluacion')),
            ],
            options={
                'verbose_name': 'Calificación',
                'verbose_name_plural': 'Calificaciones',
                'ordering': ['-fecha_calificacion'],
                'unique_together': {('evaluacion', 'estudiante')},
            },
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('category', models.CharField(choices=[('noticias', 'Noticias'), ('tutoriales', 'Tutoriales'), ('casos_exito', 'Casos de Éxito'), ('consejos', 'Consejos'), ('eventos', 'Eventos')], default='noticias', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('views', models.PositiveIntegerField(default=0)),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to='blog_images/')),
                ('excerpt', models.TextField(blank=True, max_length=300, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Billing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(max_length=3)),
                ('billing_type', models.CharField(max_length=50)),
                ('status', models.CharField(max_length=50)),
                ('payment_due_date', models.DateField()),
                ('provision', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='billings', to='home.serviceprovision')),
            ],
        ),
        migrations.AddField(
            model_name='customuser',
            name='cursos',
            field=models.ManyToManyField(blank=True, related_name='usuarios', to='home.curso'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Videollamada',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dia_semana', models.IntegerField(choices=[(0, 'Lunes'), (1, 'Martes'), (2, 'Miércoles'), (3, 'Jueves'), (4, 'Viernes'), (5, 'Sábado'), (6, 'Domingo')], help_text='Día de la semana para la videollamada')),
                ('hora_inicio', models.TimeField(help_text='Hora de inicio de la videollamada')),
                ('hora_fin', models.TimeField(help_text='Hora de fin de la videollamada')),
                ('link_videollamada', models.URLField(blank=True, help_text='Enlace de la videollamada', null=True)),
                ('activa', models.BooleanField(default=True, help_text='Indica si esta videollamada está activa')),
                ('descripcion', models.CharField(blank=True, help_text='Descripción opcional de la videollamada', max_length=200, null=True)),
                ('curso', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videollamadas', to='home.curso')),
            ],
            options={
                'ordering': ['dia_semana', 'hora_inicio'],
                'unique_together': {('curso', 'dia_semana', 'hora_inicio')},
            },
        ),
        migrations.CreateModel(
            name='SubclasificacionTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Nombre de la subclasificación', max_length=100)),
                ('descripcion', models.TextField(blank=True, help_text='Descripción de la subclasificación', null=True)),
                ('activa', models.BooleanField(default=True, help_text='Si la subclasificación está activa')),
                ('clasificacion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subclasificaciones', to='home.clasificacionticket')),
            ],
            options={
                'verbose_name': 'Subclasificación de Ticket',
                'verbose_name_plural': 'Subclasificaciones de Tickets',
                'ordering': ['clasificacion', 'nombre'],
                'unique_together': {('clasificacion', 'nombre')},
            },
        ),
        migrations.CreateModel(
            name='Entrega',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archivo', models.FileField(help_text='Archivo de la entrega', upload_to='entregas/')),
                ('comentario', models.TextField(blank=True, help_text='Comentario opcional del estudiante', null=True)),
                ('fecha_entrega', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora de entrega')),
                ('estado', models.CharField(choices=[('pendiente', 'Pendiente'), ('entregado', 'Entregado'), ('tardio', 'Tardío'), ('rechazado', 'Rechazado'), ('aprobado', 'Aprobado')], default='pendiente', help_text='Estado de la entrega', max_length=20)),
                ('fecha_revision', models.DateTimeField(blank=True, help_text='Fecha de revisión', null=True)),
                ('comentario_revisor', models.TextField(blank=True, help_text='Comentario del revisor', null=True)),
                ('calificacion', models.OneToOneField(blank=True, help_text='Calificación asociada a esta entrega', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entrega', to='home.calificacion')),
                ('estudiante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entregas', to=settings.AUTH_USER_MODEL)),
                ('evaluacion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entregas', to='home.evaluacion')),
                ('revisado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entregas_revisadas', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Entrega',
                'verbose_name_plural': 'Entregas',
                'ordering': ['-fecha_entrega'],
                'unique_together': {('evaluacion', 'estudiante')},
            },
        ),
    ]
